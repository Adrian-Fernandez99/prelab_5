
prelab_5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000270  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000002e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000314  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007d2  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c5  00000000  00000000  00000b6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000034a  00000000  00000000  00001233  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  00001580  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d7  00000000  00000000  0000161c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000c0  00000000  00000000  000019f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001ab3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e7       	ldi	r30, 0x70	; 112
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 30       	cpi	r26, 0x03	; 3
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b5 00 	call	0x16a	; 0x16a <main>
  9e:	0c 94 36 01 	jmp	0x26c	; 0x26c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <PWM_setAngle>:
	}
}

// NON-Interrupt subroutines
void PWM_setAngle(uint16_t angle) {
	OCR1A = angle;
  a6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  aa:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
  ae:	08 95       	ret

000000b0 <PWM_conf>:
	sei();
}

void PWM_conf()
{
	TCCR1A = 0;
  b0:	e0 e8       	ldi	r30, 0x80	; 128
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	10 82       	st	Z, r1
	TCCR1A |= (1 << COM1A1) | (1 << COM1A0); // Seteamos modo no invertido
  b6:	80 81       	ld	r24, Z
  b8:	80 6c       	ori	r24, 0xC0	; 192
  ba:	80 83       	st	Z, r24
	TCCR1A |= (1 << WGM13) | (1 << WGM12) | (1 << WGM11);	// Modo 14 = FAST PWM y TOP ICR1
  bc:	80 81       	ld	r24, Z
  be:	8a 61       	ori	r24, 0x1A	; 26
  c0:	80 83       	st	Z, r24
	ICR1 = 40000;
  c2:	80 e4       	ldi	r24, 0x40	; 64
  c4:	9c e9       	ldi	r25, 0x9C	; 156
  c6:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  ca:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	
	TCCR1B = 0;
  ce:	e1 e8       	ldi	r30, 0x81	; 129
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	10 82       	st	Z, r1
	TCCR1B |= (1 << CS11); // Prescaler de 64
  d4:	80 81       	ld	r24, Z
  d6:	82 60       	ori	r24, 0x02	; 2
  d8:	80 83       	st	Z, r24
  da:	08 95       	ret

000000dc <ADC_conf>:
}

void ADC_conf()
{
	ADMUX = 0;								// Se edita el MUX
  dc:	ec e7       	ldi	r30, 0x7C	; 124
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	10 82       	st	Z, r1
	ADMUX	|= (1 << REFS0);
  e2:	80 81       	ld	r24, Z
  e4:	80 64       	ori	r24, 0x40	; 64
  e6:	80 83       	st	Z, r24
	ADMUX	|= (1 << ADLAR);				// Se ajusta a la izquierda
  e8:	80 81       	ld	r24, Z
  ea:	80 62       	ori	r24, 0x20	; 32
  ec:	80 83       	st	Z, r24
	ADMUX	|= (1 << MUX2) | (1 << MUX1);	// Selecciona ADC6 como entrada
  ee:	80 81       	ld	r24, Z
  f0:	86 60       	ori	r24, 0x06	; 6
  f2:	80 83       	st	Z, r24
	
	ADCSRA	= 0;
  f4:	ea e7       	ldi	r30, 0x7A	; 122
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	10 82       	st	Z, r1
	ADCSRA	|= (1 << ADPS1) | (1 << ADPS0);	// Se edita prescaler del ADC
  fa:	80 81       	ld	r24, Z
  fc:	83 60       	ori	r24, 0x03	; 3
  fe:	80 83       	st	Z, r24
	ADCSRA	|= (1 << ADIE);					// Se habilitan interrupciones
 100:	80 81       	ld	r24, Z
 102:	88 60       	ori	r24, 0x08	; 8
 104:	80 83       	st	Z, r24
	ADCSRA	|= (1 << ADEN);					// Se habilita el ADC
 106:	80 81       	ld	r24, Z
 108:	80 68       	ori	r24, 0x80	; 128
 10a:	80 83       	st	Z, r24
	ADCSRA	|= (1 << ADSC);					// Se lee el ADC
 10c:	80 81       	ld	r24, Z
 10e:	80 64       	ori	r24, 0x40	; 64
 110:	80 83       	st	Z, r24
 112:	08 95       	ret

00000114 <setup>:
}

// Función para setear
void setup()
{
	cli();
 114:	f8 94       	cli
	
	// Se configuran puertos
	DDRD |= 0xFF;		// Puerto D es salida
 116:	8a b1       	in	r24, 0x0a	; 10
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	8a b9       	out	0x0a, r24	; 10
	PORTD |= 0x00;
 11c:	9b b1       	in	r25, 0x0b	; 11
 11e:	9b b9       	out	0x0b, r25	; 11
	
	DDRC |= 0xFF;		// Puerto C es salida
 120:	97 b1       	in	r25, 0x07	; 7
 122:	87 b9       	out	0x07, r24	; 7
	PORTC |= 0x00;
 124:	88 b1       	in	r24, 0x08	; 8
 126:	88 b9       	out	0x08, r24	; 8
	
	DDRB |= 0x0F;		// La mitad del puerto B es salida y la otra entrada
 128:	84 b1       	in	r24, 0x04	; 4
 12a:	8f 60       	ori	r24, 0x0F	; 15
 12c:	84 b9       	out	0x04, r24	; 4
	PORTB |= ((1 << PORTB4) | (1 << PORTB5));
 12e:	85 b1       	in	r24, 0x05	; 5
 130:	80 63       	ori	r24, 0x30	; 48
 132:	85 b9       	out	0x05, r24	; 5
	
	// Se configuran las interrupciones
	PCMSK0 |= (1 << PORTB4) | (1 << PORTB5);
 134:	eb e6       	ldi	r30, 0x6B	; 107
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	80 63       	ori	r24, 0x30	; 48
 13c:	80 83       	st	Z, r24
	PCICR |= (1 << PCIE0);
 13e:	e8 e6       	ldi	r30, 0x68	; 104
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	81 60       	ori	r24, 0x01	; 1
 146:	80 83       	st	Z, r24
	
	CLKPR	= (1 << CLKPCE); // Habilitar cambio en el prescaler
 148:	e1 e6       	ldi	r30, 0x61	; 97
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 e8       	ldi	r24, 0x80	; 128
 14e:	80 83       	st	Z, r24
	CLKPR	= (1 << CLKPS2); // Setea presc a 16 para 1Mhz
 150:	84 e0       	ldi	r24, 0x04	; 4
 152:	80 83       	st	Z, r24
	
	PWM_conf();
 154:	0e 94 58 00 	call	0xb0	; 0xb0 <PWM_conf>
	
	ADC_conf();
 158:	0e 94 6e 00 	call	0xdc	; 0xdc <ADC_conf>
	ADCSRA	|= (1 << ADSC);
 15c:	ea e7       	ldi	r30, 0x7A	; 122
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	80 64       	ori	r24, 0x40	; 64
 164:	80 83       	st	Z, r24


	sei();
 166:	78 94       	sei
 168:	08 95       	ret

0000016a <main>:

// Main loop
int main(void)
{
	// Se llama función para setear
	setup();
 16a:	0e 94 8a 00 	call	0x114	; 0x114 <setup>
	
	// Se inicia el loop
	while (1)
	{
		angle = ((uint32_t)ADC_reader * 2000) / 1023 + 2000; // Mapear a 0-180 grados 
 16e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <ADC_reader>
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	a0 ed       	ldi	r26, 0xD0	; 208
 176:	b7 e0       	ldi	r27, 0x07	; 7
 178:	0e 94 27 01 	call	0x24e	; 0x24e <__umulhisi3>
 17c:	2f ef       	ldi	r18, 0xFF	; 255
 17e:	33 e0       	ldi	r19, 0x03	; 3
 180:	40 e0       	ldi	r20, 0x00	; 0
 182:	50 e0       	ldi	r21, 0x00	; 0
 184:	0e 94 05 01 	call	0x20a	; 0x20a <__udivmodsi4>
 188:	c9 01       	movw	r24, r18
 18a:	80 53       	subi	r24, 0x30	; 48
 18c:	98 4f       	sbci	r25, 0xF8	; 248
 18e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 192:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		PWM_setAngle(angle);
 196:	0e 94 53 00 	call	0xa6	; 0xa6 <PWM_setAngle>
 19a:	e9 cf       	rjmp	.-46     	; 0x16e <main+0x4>

0000019c <__vector_21>:
	ADCSRA	|= (1 << ADSC);					// Se lee el ADC
}

// Interrupt routines
ISR(ADC_vect)
{
 19c:	1f 92       	push	r1
 19e:	0f 92       	push	r0
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	0f 92       	push	r0
 1a4:	11 24       	eor	r1, r1
 1a6:	2f 93       	push	r18
 1a8:	3f 93       	push	r19
 1aa:	8f 93       	push	r24
 1ac:	9f 93       	push	r25
 1ae:	ef 93       	push	r30
 1b0:	ff 93       	push	r31
	uint16_t suma = 0;
	for (uint8_t i = 0; i < 8; i++) {	// Mientras i no sea mayor que 8
 1b2:	90 e0       	ldi	r25, 0x00	; 0
}

// Interrupt routines
ISR(ADC_vect)
{
	uint16_t suma = 0;
 1b4:	20 e0       	ldi	r18, 0x00	; 0
 1b6:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t i = 0; i < 8; i++) {	// Mientras i no sea mayor que 8
 1b8:	0e c0       	rjmp	.+28     	; 0x1d6 <__vector_21+0x3a>
		ADCSRA |= (1 << ADSC);			// Leer ADC
 1ba:	ea e7       	ldi	r30, 0x7A	; 122
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	80 81       	ld	r24, Z
 1c0:	80 64       	ori	r24, 0x40	; 64
 1c2:	80 83       	st	Z, r24
		while (ADCSRA & (1 << ADSC));	// Mientras se pueda leer el ADC
 1c4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 1c8:	86 fd       	sbrc	r24, 6
 1ca:	fc cf       	rjmp	.-8      	; 0x1c4 <__vector_21+0x28>
		suma += ADCH;					// Sumar el ADC a una variable
 1cc:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1d0:	28 0f       	add	r18, r24
 1d2:	31 1d       	adc	r19, r1

// Interrupt routines
ISR(ADC_vect)
{
	uint16_t suma = 0;
	for (uint8_t i = 0; i < 8; i++) {	// Mientras i no sea mayor que 8
 1d4:	9f 5f       	subi	r25, 0xFF	; 255
 1d6:	98 30       	cpi	r25, 0x08	; 8
 1d8:	80 f3       	brcs	.-32     	; 0x1ba <__vector_21+0x1e>
		ADCSRA |= (1 << ADSC);			// Leer ADC
		while (ADCSRA & (1 << ADSC));	// Mientras se pueda leer el ADC
		suma += ADCH;					// Sumar el ADC a una variable
	}
	
	ADC_reader = suma / 8;				// Sacar promedio de esta variable
 1da:	36 95       	lsr	r19
 1dc:	27 95       	ror	r18
 1de:	36 95       	lsr	r19
 1e0:	27 95       	ror	r18
 1e2:	36 95       	lsr	r19
 1e4:	27 95       	ror	r18
 1e6:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <ADC_reader>
	
	ADCSRA	|= (1 << ADSC);				// Leer el ADC
 1ea:	ea e7       	ldi	r30, 0x7A	; 122
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	80 81       	ld	r24, Z
 1f0:	80 64       	ori	r24, 0x40	; 64
 1f2:	80 83       	st	Z, r24
 1f4:	ff 91       	pop	r31
 1f6:	ef 91       	pop	r30
 1f8:	9f 91       	pop	r25
 1fa:	8f 91       	pop	r24
 1fc:	3f 91       	pop	r19
 1fe:	2f 91       	pop	r18
 200:	0f 90       	pop	r0
 202:	0f be       	out	0x3f, r0	; 63
 204:	0f 90       	pop	r0
 206:	1f 90       	pop	r1
 208:	18 95       	reti

0000020a <__udivmodsi4>:
 20a:	a1 e2       	ldi	r26, 0x21	; 33
 20c:	1a 2e       	mov	r1, r26
 20e:	aa 1b       	sub	r26, r26
 210:	bb 1b       	sub	r27, r27
 212:	fd 01       	movw	r30, r26
 214:	0d c0       	rjmp	.+26     	; 0x230 <__udivmodsi4_ep>

00000216 <__udivmodsi4_loop>:
 216:	aa 1f       	adc	r26, r26
 218:	bb 1f       	adc	r27, r27
 21a:	ee 1f       	adc	r30, r30
 21c:	ff 1f       	adc	r31, r31
 21e:	a2 17       	cp	r26, r18
 220:	b3 07       	cpc	r27, r19
 222:	e4 07       	cpc	r30, r20
 224:	f5 07       	cpc	r31, r21
 226:	20 f0       	brcs	.+8      	; 0x230 <__udivmodsi4_ep>
 228:	a2 1b       	sub	r26, r18
 22a:	b3 0b       	sbc	r27, r19
 22c:	e4 0b       	sbc	r30, r20
 22e:	f5 0b       	sbc	r31, r21

00000230 <__udivmodsi4_ep>:
 230:	66 1f       	adc	r22, r22
 232:	77 1f       	adc	r23, r23
 234:	88 1f       	adc	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	1a 94       	dec	r1
 23a:	69 f7       	brne	.-38     	; 0x216 <__udivmodsi4_loop>
 23c:	60 95       	com	r22
 23e:	70 95       	com	r23
 240:	80 95       	com	r24
 242:	90 95       	com	r25
 244:	9b 01       	movw	r18, r22
 246:	ac 01       	movw	r20, r24
 248:	bd 01       	movw	r22, r26
 24a:	cf 01       	movw	r24, r30
 24c:	08 95       	ret

0000024e <__umulhisi3>:
 24e:	a2 9f       	mul	r26, r18
 250:	b0 01       	movw	r22, r0
 252:	b3 9f       	mul	r27, r19
 254:	c0 01       	movw	r24, r0
 256:	a3 9f       	mul	r26, r19
 258:	70 0d       	add	r23, r0
 25a:	81 1d       	adc	r24, r1
 25c:	11 24       	eor	r1, r1
 25e:	91 1d       	adc	r25, r1
 260:	b2 9f       	mul	r27, r18
 262:	70 0d       	add	r23, r0
 264:	81 1d       	adc	r24, r1
 266:	11 24       	eor	r1, r1
 268:	91 1d       	adc	r25, r1
 26a:	08 95       	ret

0000026c <_exit>:
 26c:	f8 94       	cli

0000026e <__stop_program>:
 26e:	ff cf       	rjmp	.-2      	; 0x26e <__stop_program>
